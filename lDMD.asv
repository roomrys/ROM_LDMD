function [Phi, D, b, t_svd] = lDMD(Y, r)
global showFigs sim_number chosen_v
% 1. split Y matrix into Y1 and Y2
Y1 = Y(:, 1:(size(Y, 2) - 1));
Y2 = Y(:, 2:size(Y, 2));

svd_fname = join([pwd '\Matrices\SVD\svd' '_s' num2str(sim_number) '_' join(chosen_v, '') '.mat'], '');
if isfile(svd_fname)
    load(svd_fname);
    U_svd = svd_struct.U;
    S_svd = svd_struct.S;
    V_svd = svd_struct.V;
    t_svd = svd_struct.t;
else
    tstart = tic();
    % 2. svd of Y1
    [U_svd, S_svd, V_svd] = svd(Y1, 0);
    
    [rel_energy_Sr, sum_S] = sv_analysis(S_svd);
    if isequal('Compute', r)
        % 3. rank truncated SVD, choose rank r based on SV energy
        for i=1:size(rel_energy_Sr, 1)
            if (S_svd(i, i) / sum_S) < 10e-4
                r = i
                break
            end
        end
    end
    
    t_svd = toc(tstart);
    svd_struct.U = U_svd; svd_struct.S = S_svd; svd_struct.V = V_svd; svd_struct.t = t_svd;
    save(svd_fname, 'svd_struct', '-v7.3')
    clear svd_struct
end
clear svd_struct

global rank_trunc
rank_trunc = r;

% 4. Compute K_tilde = U'*Y2*V*inv(S) = U'KU (K projected on dominant modes)
S_svd_inv = diag(1 ./ diag(S_svd(1:r, 1:r)));
K_tilde = U_svd(:, 1:r)' * Y2 * V_svd(:, 1:r) * S_svd_inv;

% 5. eig decomposition of K_tilde = eig decomp of K
[W, D] = eig(K_tilde);
D = sparse(D);

% 345b. check rank truncation has complex conjugate
[U, S, V, K_tilde, W, D, r] = check_rank_trunc(U_svd, S_svd, V_svd, K_tilde, W, D, r, Y2);

% 6. eig vector K = Y2*V*inv(S)*W ~= U*W (W = eigenvector K_tilde)
Phi = U * W;  % note this is projected DMD mode not exact DMD mode

% get IC b = pinv(Phi)* x0
b = Phi \ Y(:, 1);
